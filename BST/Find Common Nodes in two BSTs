#include<unordered_map>
#include<algorithm>
#include<vector>

 vector <int>a ;
 vector <int> temp;
void inorder(Node *root){
    if(root==NULL){
        return ;
    }
    else{
        inorder(root->left);
        temp.push_back(root->data);
        inorder(root->right);
    }
}





vector<int> func2()
{
   unordered_map <int,int> m;
    for(int i=0;i<temp.size();i++){
        m[temp[i]]=m[temp[i]]+1;
    }
    
    
    for(auto it :m){
        if(it.second==2){
            a.push_back(it.first);
        }
    }
    sort(a.begin(),a.end());
    return a;
    
}



class Solution
{
    public:
    //Function to find the nodes that are common in both BST. 
    
    vector <int> findCommon(Node *root1, Node *root2)
    {
     //Your code here
     a.clear();
     temp.clear();
     
     inorder(root1);
     inorder(root2);
     return func2();
    }
};
