 Minimum Number in a sorted rotated array
 Given an array of distinct elements which was initially sorted. This array is rotated at some unknown point. The task is to find the minimum element in the given sorted and rotated array. 

Example 1:

Input:
N = 10
arr[] = {2,3,4,5,6,7,8,9,10,1}
Output: 1
Explanation: The array is rotated 
once anti-clockwise. So minium 
element is at last index (n-1) 
which is 1.

Example 2:

Input:
N = 5
arr[] = {3,4,5,1,2}
Output: 1
Explanation: The array is rotated 
and the minimum element present is
at index (n-2) which is 1
  
  //User function Template for C

// Function to find the minimum element in sorted and rotated array
// arr: input array
// low and high are 0 and n-1, where n is the size of arr
int minNumber(int arr[], int low, int high)
{
    // Your code here
    int l=low;
    int r=high;
    int mid=0;
    while(l<=r){
         mid= ((l+r)/2);
        if(l==0 && r==0 && mid==0){return arr[0];}
        if(l==high && r==high && mid==high){return arr[high];}
        
        if((arr[mid]<arr[mid-1])&&(arr[mid]<arr[mid+1])){
            return arr[mid];
        }
        if(arr[mid]>arr[r]){l=mid+1;}
        if(arr[mid]<arr[r]){r=mid-1;}
    }
    return -1;
}
