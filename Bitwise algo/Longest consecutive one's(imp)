public:
    int maxConsecutiveOnes(int n)
    {
        // code here
        int count=0;
        while(n!=0){
            count++;
            n=n&(n<<1);
        }
        return count;
    }
    The idea is based on the concept that if we AND a bit sequence with a left shifted version of itself, weâ€™re effectively removing the trailing 1 from every sequence of consecutive 1s.

      11101111   (N)
    & 11011110   (N << 1)
    ----------
      11001110   (N & (N << 1)) 
        ^    ^
        |    |
   trailing 1 removed

So the operation N = (N & (N << 1)) reduces length of every sequence of 1s by one in binary representation of N. If we keep doing this operation in a loop, we end up with N = 0. The number of iterations required to reach 0 is actually length of the longest consecutive sequence of 1s.
